import unittest

from manipulation.solver import LPSolver
from manipulation.ucm import generate_LP
from manipulation.utils import borda
import numpy as np


class TestSolver(unittest.TestCase):
    # @nottest

    def test_solve(self):
        A = np.array([[-1., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
                      [-0., -1., -0., -0., -0., -0., -0., -0., -0., -0.],
                      [-0., -0., -1., -0., -0., -0., -0., -0., -0., -0.],
                      [-0., -0., -0., -1., -0., -0., -0., -0., -0., -0.],
                      [-0., -0., -0., -0., -1., -0., -0., -0., -0., -0.],
                      [-0., -0., -0., -0., -0., -1., -0., -0., -0., -0.],
                      [-0., -0., -0., -0., -0., -0., -1., -0., -0., -0.],
                      [-0., -0., -0., -0., -0., -0., -0., -1., -0., -0.],
                      [-0., -0., -0., -0., -0., -0., -0., -0., -1., -0.],
                      [-0., -0., -0., -0., -0., -0., -0., -0., -0., -1.],
                      [1., 1., 1., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 1., 1., 1., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 1., 1., 1., 0.],
                      [-1., 0., 0., -1., 0., 0., -1., 0., 0., 0.],
                      [0., -1., 0., 0., -1., 0., 0., -1., 0., 0.],
                      [0., 0., -1., 0., 0., -1., 0., 0., -1., 0.],
                      [0., 1., 2., 0., 0., 0., 0., 0., 0., -1.],
                      [0., 0., 0., 0., 1., 2., 0., 0., 0., -1.],
                      [0., 0., 0., 0., 0., 0., 0., 1., 2., -1.]])

        b = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2., 2., 2.,
                      -2., -2., -2., -1., -2., -3.])
        c = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 1.])

        solver = LPSolver(A, b, c)
        solver.solve()

        x = solver.get_x()

        tol = 0.0001
        self.assertTrue(np.all(np.dot(A, x) <= b + tol))
        self.assertAlmostEqual(solver.get_objective(), 4.0)